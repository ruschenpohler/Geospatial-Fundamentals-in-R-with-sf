our_packages<- c("ggplot2", "sf", "units", "tmap", "raster")
for (i in our_packages) {
if ( i %in% rownames(installed.packages()) == FALSE) {
install.packages(i)
}
}
library(sf)     # simple features objects and methods
library(tmap)   # mapping spatial objects
library(raster) # reading in and operating on rasters
path = "/path/to/your/working_directory"
setwd(path)
# Read in the 'sftracts_wpop' shapefile
SFtracts <- st_read("./data", "sftracts_wpop")
setwd("C:/Users/ruschenpohler/Desktop/GitHub/Geospatial-Fundamentals-in-R-with-sf")
# Read in the 'sftracts_wpop' shapefile
SFtracts <- st_read("./data", "sftracts_wpop")
path = "C:\Users\ruschenpohler\Desktop\GitHub\Geospatial-Fundamentals-in-R-with-sf"
setwd(path)
path = "C:/Users/ruschenpohler/Desktop/GitHub/Geospatial-Fundamentals-in-R-with-sf"
setwd(path)
# Read in the 'sftracts_wpop' shapefile
SFtracts <- st_read("./data", "sftracts_wpop")
# Read in from CSV file
SFhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
# subset the data
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
# coerce to an `sf` object
SFhomes15_sf <- st_as_sf(SFhomes15, coords = c('lon', 'lat'),
crs = 4326)
#Reproject to the SFtracts projection
#NOTE: We're overwriting the previous SFhomes15_sf object here! This is
#fine to do if we want, but we should always beware.
SFhomes15_sf = st_transform(SFhomes15_sf, st_crs(SFtracts))
#check projection equality
st_crs(SFhomes15_sf) == st_crs(SFtracts)
#read in a Bay Area DEM (Digital Elevation Model)
#(from http://www.webgis.com/terr_pages/CA/dem1/sanfrancisco.html)
DEM = raster('./data/san_francisco-e.DEM')
#plot it
plot(DEM)
DEM
str(DEM)
DEM@data
DEM@extent
DEM@extent@class
DEM@extent@xmin
DEM@extent@xmax
DEM@data
DEM[10:15, 20:30]
class(DEM)
typeof(DEM)
DEM
(DEM@extent@xmax - DEM@extent@xmin) / DEM@ncols
(DEM@extent@ymax - DEM@extent@ymin) / DEM@nrows
DEM
str(DEM@data)
DEM@data@values
DEM@data@inmemory
DEM@data@fromdisk
DEM[10:15, 20:30]
DEM[,]
#coerce our whole raser's dataset to a matrix, with the appropriate number
#of columns, and
matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE)
test = raster(matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE))
test
DEM[10:15, 20:30, drop = FALSE]
test = DEM[10:15, 20:30, drop = FALSE]
plot(test)
test@data@values
#check out its projection
proj4string(DEM)
#reproject tracts to our DEM projection
SFtracts_NAD = st_transform(SFtracts, st_crs(DEM))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)))
?projectRaster
class(st_crs(SFtracts))
class(crs(st_crs(SFtracts)$proj4string))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, crs(st_crs(SFtracts)$proj4string)))
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
st_crs(DEM_WGS)$epsg == st_crs(SFtracts)$epsg
SFhomes15_sp = as_Spatial(SFhomes15_sf)
SFhomes15_sp
str(SFhomes15_sp)
str(SFhomes15_sp)
plot(SFhomes15_sp)
SFhomes15_sfagain = st_as_sf(SFhomes15_sp)
plot(SFhomes15_sfagain['totvalue'])
# clip the WGS CRS version of the rasters to SFtracts
DEM_WGS_crop = crop(DEM_WGS, SFtracts)
# Clip the NAD CRS version
DEM_crop = crop(DEM, SFtracts_NAD)
plot(DEM_WGS_crop)
# clip the WGS CRS version of the rasters to SFtracts
DEM_WGS_crop = crop(DEM_WGS, SFtracts)
# Clip the NAD CRS version
DEM_crop = crop(DEM, SFtracts_NAD)
plot(DEM_WGS_crop)
#plot together
plot(DEM_WGS_crop)
plot(st_geometry(SFtracts), add = T, col = NA)
DEM_WGS_crop_masked = mask(DEM_WGS_crop, SFtracts)
DEM_WGS_crop_masked
DEM_WGS_crop
DEM_WGS
plot(DEM_WGS_crop_masked)
plot(st_geometry(SFtracts), add = T, col = NA)
my_map <- tm_shape(DEM_WGS_crop_masked) +
tm_raster() +
tm_shape(SFtracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map
#write our reprojected, cropped data to the data directory, using the Geotiff format
#(and allow R to overwrite if file already exists)
writeRaster(DEM_WGS_crop_masked, filename="./data/DEM_reproject_crop.tif", format="GTiff", overwrite = T)
my_map
#Cropping changes extent of Simple frame
DEM_WGS_crop
#plot together
plot(DEM_WGS_crop)
#read in nlcd data
nlcd = raster('./data/nlcd2011_sf.tif')
#plot nlcd
plot(nlcd)
freq(nlcd)
barplot(nlcd)
#check projection equality
st_crs(nlcd) == st_crs(SFtracts)
#reproject
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, crs(st_crs(SFtracts)$proj4string)))
#check projection equality again
st_crs(nlcd_WGS)$epsg == st_crs(SFtracts)$epsg
#crop
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
plot(nlcd_WGS_crop)
nlcd_WGS_crop@legend
reclass_vec <- c(0, 20, NA, # water will be set to NA (i.e. 'left out' of our analysis)
20, 21, 1, # we'll treat developed open space as greenspace, based on NLCD description
21, 30, 0, # developed and hardscape will have 0s
30, 31, NA,
31, Inf, 1) # greensapce will have 1s
reclass_vec
reclass_m <- matrix(reclass_vec, ncol = 3, byrow = TRUE)
reclass_m
nlcd_green <- reclassify(nlcd_WGS_crop, reclass_m)
freq(nlcd_green)
barplot(nlcd_green)
plot(nlcd_green)
#extract the mean nlcd_simple values to tract polygons
greenspace = extract(nlcd_green, SFtracts, fun=mean)
greenspace
