tmap_mode('view')
tm_shape(SFboundary) +
tm_polygons(col="beige", border.col="black") +
tm_shape(SFhighways_lonlat) +
tm_lines(col="black") +
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.05,
title = "San Francisco Property Values (2015)",
popup.vars=c("SalesYear","totvalue","NumBedrooms",
"NumBathrooms","AreaSquareFeet")) +
tm_layout(inner.margins=c(.05, .2, .15, .05)) # bottom, left, top, right
tm_basemap("Stamen.Watercolor") +
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.05, title = "San Francisco Property Values (2015)") +
tm_tiles("Stamen.TonerLabels")
fav_map <- tmap_last()
fav_map
tmap_save(fav_map, "./output/SF_properties.png", height=6) # Static image file with
tmap_save(fav_map, "./output/SF_properties.html") # interactive web map
tmap_save(fav_map, "./output/SF_properties.png", height=6) # Static image file with
fav_map
tmap_save(fav_map, "./output/SF_properties.png", height=6) # Static image file with
tmap_save(fav_map, "./output/SF_properties.html") # interactive web map
tmap_save(fav_map, "./output/SF_properties.png", height=6) # Static image file with
tmap_save(fav_map, "./output/SF_properties.html") # interactive web map
tmap_save(fav_map, "./output/SF_properties.png", height=6) # Static image file with
tmap_save(fav_map, "./output/SF_properties.html") # interactive web map
tmap_mode('plot')
tm_basemap("Stamen.Watercolor") +
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.05, title = "San Francisco Property Values (2015)") +
tm_tiles("Stamen.TonerLabels")
tmap_mode('plot')
tm_basemap("Stamen.Watercolor") +
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.05, title = "San Francisco Property Values (2015)") +
tm_tiles("Stamen.TonerLabels")
fav_map <- tmap_last()
tmap_save(fav_map, "./output/SF_properties.png", height=6) # Static image file with
tmap_save(fav_map, "./output/SF_properties.html") # interactive web map
#highways are already in 26910!
st_crs(SFhighways)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
#OR we could just use the EPSG code directly
#SFhomes15_utm <- st_transform(SFhomes15_sf, 26910)
#highways are already in 26910!
st_crs(SFhighways)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
#OR we could just use the EPSG code directly
#SFhomes15_utm <- st_transform(SFhomes15_sf, 26910)
# Check the CRS
st_crs(SFboundary) == st_crs(SFhomes15_utm)
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
# Check again
st_crs(SFboundary_utm) == st_crs(SFhomes15_utm)
# Transform Bart to UTM
bart_utm <- st_transform(bart_sf, st_crs(SFhomes15_utm))
st_crs(bart_utm)$epsg
# Transform Bart to UTM
bart_utm <- st_transform(bart_sf, st_crs(SFhomes15_utm))
bart_sf = bart [bart$CO == 'SF', ]
library(sf)     # spatial objects and methods
library(tmap)   # mapping spatial objects
path = "/path/to/your/working_directory"
setwd(path)
setwd("C:/Users/ruschenpohler/Desktop/GitHub/Geospatial-Fundamentals-in-R-with-sf")
source('./docs/reload_part_01_data.R')
#highways are already in 26910!
st_crs(SFhighways)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
#OR we could just use the EPSG code directly
#SFhomes15_utm <- st_transform(SFhomes15_sf, 26910)
# Check the CRS
st_crs(SFboundary) == st_crs(SFhomes15_utm)
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
# Check again
st_crs(SFboundary_utm) == st_crs(SFhomes15_utm)
#Subsetting BART data
bart_sf = bart [bart$CO == 'SF', ]
# Transform Bart to UTM
bart_utm <- st_transform(bart_sf, st_crs(SFhomes15_utm))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath('../'))
---
title: "Geospatial Fundamentals in R with sf, Part 2"
author: "Patty Frontiera and Drew Hart, UC Berkeley D-Lab"
date: "August 2019"
output: #pdf_document
ioslides_presentation:
widescreen: true
smaller: true
editor_options:
chunk_output_type: console
always_allow_html: yes
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath('../'))
```
## Part II Prep
1. Open the repo at <https://github.com/dlab-berkeley/Geospatial-Fundamentals-in-R-with-sf>
- Download and unzip the zip file
- Take note of where the folder is located
2. Start RStudio and open a **new script**, or **./docs/02-spatial_analysis.Rmd**
3. Set your working directory to the folder you unzipped
4. Install the required libraries in RStudio, ONLY IF YOU DO NOT HAVE THEM ALREADY!
```{r, eval=F}
our_packages<- c("ggplot2", "dplyr", "sf", "units", "tmap")
for (i in our_packages) {
if ( i %in% rownames(installed.packages()) == FALSE) {
install.packages(i)
}
}
```
5. Open the slides, **./docs/02-spatial-analysis.html**, in your browser (or click the "Part 2 Slides" link the repo).
## Part II Overview
Recap Part I
Tour of Spatial Analysis
## Part I Recap
In Part I, we:
- Loaded geospatial data from CSV files
- Mapped data with `ggplot`
- Promoted data frames to `sf` objects with `sf::st_as_sf`
- Loaded geodata from shapefiles with `sf::st_read`
- Explored `CRSs` with `sf::st_crs`
- Transformed CRSs with `sf::st_transform`
- Mapped data with `tmap`
## R Spatial Libraries
Let's load the libraries we will use
```{r, eval=FALSE}
library(sf)     # spatial objects and methods
library(tmap)   # mapping spatial objects
```
```{r, echo=FALSE}
library(sf)     # spatial objects and methods
library(tmap)   # mapping spatial objects
```
## Set your working directory
Use `setwd` to set your working directory to the location of the tutorial files.
For example:
```{r, eval=FALSE}
path = "/path/to/your/working_directory"
setwd(path)
```
## Reload Part I data
You may want to reload the data that we had in our workspace at the end of Part I.
We've provided a little script for doing that, which you can run using the following line of code:
```{r, results='hide'}
source('./docs/reload_part_01_data.R')
```
# Spatial Analysis
## The Spatial Analysis Workflow
1. Mapping / plotting to see location and distribution
2. Asking questions of, or querying, your data
3. Cleaning & reshaping the data
4. Applying analysis methods
5. Mapping analysis results
6. Repeat as needed
## Transform data to common CRS
In order to perform spatial analysis we need to first convert all data objects to a common CRS.
Which type? Projected or Geographic CRS?
## Geographic vs. Projected CRS
If my goal is to create maps, I may convert all data to a geographic CRS.
- Why?  Which one?
If my goal is to do spatial analysis, I will convert to a projected CRS.
- Why? Which one?
## Common CRS EPSG Codes
**Geographic CRSs**
* `4326` Geographic, WGS84 (default for lon/lat)
* `4269` Geographic, NAD83 (USA Fed agencies like Census)
**Projected CRSs**
* `5070` USA Contiguous Albers Equal Area Conic
* `3310` CA ALbers Equal Area
* `26910` UTM Zone 10, NAD83 (Northern Cal)
* `3857` Web Mercator (web maps)
## Transform all layers to UTM 10N, NAD83
Use `st_transform` to transform `SFhomes15_sp` and `bart` to `UTM 10N, NAD83`
- `SFhighways` and `SFboundary` already have this CRS
Recall, this transformation is called `projecting` or `reprojecting`
The `EPSG` code is **26910**, units are meters.
## Transform all layers to UTM 10, NAD83
First, transform `SFhomes15_sp`
(*Remember, this is also called `reprojecting`.*)
Note the two methods for doing same thing:
```{r}
#highways are already in 26910!
st_crs(SFhighways)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
#OR we could just use the EPSG code directly
#SFhomes15_utm <- st_transform(SFhomes15_sf, 26910)
```
## Transform the boundary?
```{r}
# Check the CRS
st_crs(SFboundary) == st_crs(SFhomes15_utm)
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
# Check again
st_crs(SFboundary_utm) == st_crs(SFhomes15_utm)
```
## BART data - Challenge
Transform the `bart_sf` object to UTM 10N.
Name the new object `bart_utm`
## Challenge: Solution
```{r}
#Subsetting BART data
bart_sf = bart [bart$CO == 'SF', ]
# Transform Bart to UTM
bart_utm <- st_transform(bart_sf, st_crs(SFhomes15_utm))
```
---
title: "Geospatial Fundamentals in R with sf, Part 2"
author: "Patty Frontiera and Drew Hart, UC Berkeley D-Lab"
date: "August 2019"
output: #pdf_document
ioslides_presentation:
widescreen: true
smaller: true
editor_options:
chunk_output_type: console
always_allow_html: yes
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath('../'))
```
## Part II Prep
1. Open the repo at <https://github.com/dlab-berkeley/Geospatial-Fundamentals-in-R-with-sf>
- Download and unzip the zip file
- Take note of where the folder is located
2. Start RStudio and open a **new script**, or **./docs/02-spatial_analysis.Rmd**
3. Set your working directory to the folder you unzipped
4. Install the required libraries in RStudio, ONLY IF YOU DO NOT HAVE THEM ALREADY!
```{r, eval=F}
our_packages<- c("ggplot2", "dplyr", "sf", "units", "tmap")
for (i in our_packages) {
if ( i %in% rownames(installed.packages()) == FALSE) {
install.packages(i)
}
}
```
5. Open the slides, **./docs/02-spatial-analysis.html**, in your browser (or click the "Part 2 Slides" link the repo).
## Part II Overview
Recap Part I
Tour of Spatial Analysis
## Part I Recap
In Part I, we:
- Loaded geospatial data from CSV files
- Mapped data with `ggplot`
- Promoted data frames to `sf` objects with `sf::st_as_sf`
- Loaded geodata from shapefiles with `sf::st_read`
- Explored `CRSs` with `sf::st_crs`
- Transformed CRSs with `sf::st_transform`
- Mapped data with `tmap`
## R Spatial Libraries
Let's load the libraries we will use
```{r, eval=FALSE}
library(sf)     # spatial objects and methods
library(tmap)   # mapping spatial objects
```
```{r, echo=FALSE}
library(sf)     # spatial objects and methods
library(tmap)   # mapping spatial objects
```
## Set your working directory
Use `setwd` to set your working directory to the location of the tutorial files.
For example:
```{r, eval=FALSE}
path = "/path/to/your/working_directory"
setwd(path)
```
## Reload Part I data
You may want to reload the data that we had in our workspace at the end of Part I.
We've provided a little script for doing that, which you can run using the following line of code:
```{r, results='hide'}
source('./docs/reload_part_01_data.R')
```
# Spatial Analysis
## The Spatial Analysis Workflow
1. Mapping / plotting to see location and distribution
2. Asking questions of, or querying, your data
3. Cleaning & reshaping the data
4. Applying analysis methods
5. Mapping analysis results
6. Repeat as needed
## Transform data to common CRS
In order to perform spatial analysis we need to first convert all data objects to a common CRS.
Which type? Projected or Geographic CRS?
## Geographic vs. Projected CRS
If my goal is to create maps, I may convert all data to a geographic CRS.
- Why?  Which one?
If my goal is to do spatial analysis, I will convert to a projected CRS.
- Why? Which one?
## Common CRS EPSG Codes
**Geographic CRSs**
* `4326` Geographic, WGS84 (default for lon/lat)
* `4269` Geographic, NAD83 (USA Fed agencies like Census)
**Projected CRSs**
* `5070` USA Contiguous Albers Equal Area Conic
* `3310` CA ALbers Equal Area
* `26910` UTM Zone 10, NAD83 (Northern Cal)
* `3857` Web Mercator (web maps)
## Transform all layers to UTM 10N, NAD83
Use `st_transform` to transform `SFhomes15_sp` and `bart` to `UTM 10N, NAD83`
- `SFhighways` and `SFboundary` already have this CRS
Recall, this transformation is called `projecting` or `reprojecting`
The `EPSG` code is **26910**, units are meters.
## Transform all layers to UTM 10, NAD83
First, transform `SFhomes15_sp`
(*Remember, this is also called `reprojecting`.*)
Note the two methods for doing same thing:
```{r}
#highways are already in 26910!
st_crs(SFhighways)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
#OR we could just use the EPSG code directly
#SFhomes15_utm <- st_transform(SFhomes15_sf, 26910)
```
## Transform the boundary?
```{r}
# Check the CRS
st_crs(SFboundary) == st_crs(SFhomes15_utm)
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
# Check again
st_crs(SFboundary_utm) == st_crs(SFhomes15_utm)
```
## BART data - Challenge
Transform the `bart_sf` object to UTM 10N.
Name the new object `bart_utm`
## Challenge: Solution
```{r}
#Subsetting BART data
#bart_sf = bart [bart$CO == 'SF', ]
# Transform Bart to UTM
bart_utm <- st_transform(bart_sf, st_crs(SFhomes15_utm))
st_crs(bart_utm)$epsg
st_crs(SFboundary_utm)$epsg
st_crs(SFhighways)$epsg
st_crs(SFhomes15_utm)$epsg
plot(SFboundary_utm)
lines(SFhighways, col='purple', lwd=4)
points(SFhomes15_utm)
plot(bart_utm, col="red", pch=15, add=T)
plot(st_geometry(SFboundary_utm))
plot(st_geometry(SFhighways), col='purple', lwd=4, add = T)
plot(st_geometry(SFhomes15_utm), add = T, pch = 19, cex = 0.5)
plot(st_geometry(bart_utm), col="skyblue", pch=19, cex = 1, add=T)
challenge_map = tm_shape(SFboundary) +
tm_polygons() +
tm_shape(SFhighways) +
tm_lines(col = 'purple', lwd = 4) +
tm_shape(SFhomes15_sf) +
tm_dots(col = 'black', size = 0.5) +
tm_shape(bart_utm) +
tm_dots(col = 'skyblue', size = 1)
tmap_mode('plot')
challenge_map
challenge_map = tm_shape(SFboundary) +
tm_polygons() +
tm_shape(SFhighways) +
tm_lines(col = 'purple', lwd = 4) +
tm_shape(SFhomes15_sf) +
tm_dots(col = 'black', size = 0.15) +
tm_shape(bart_utm) +
tm_dots(col = 'skyblue', size = 1)
tmap_mode('plot')
challenge_map
sf_area = st_area(SFboundary_utm)
sf_area
class(sf_area)
typeof(sf_area)
sf_area / (1000 * 1000) # Convert to square KM
set_units(sf_area, km^2)
library(units)
set_units(sf_area, km^2)
set_units(sf_area, km^2)
head(valid_udunits(), 2)
st_area(SFboundary)
st_area(SFboundary_utm)
st_length(SFhighways)
length_total = sum(st_length(SFhighways))
length_total
length_total = set_units(sum(st_length(SFhighways)), km)
length_total
perim = lwgeom::st_perimeter(tracts) #Don't need lib fct bc package is a dependency of sf
head(perim, 10)
emb_pow_dist = st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
bart_utm[bart_utm$STATION == 'POWELL STREET',])
emb_pow_dist = set_units(emb_pow_dist, km)
emb_pow_dist
emb_pow_dist = st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
bart_utm[bart_utm$STATION == 'POWELL STREET',])
emb_pow_dist = set_units(emb_pow_dist, km)
emb_pow_dist
dist_prop2embarc <- st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm)
length(dist_prop2embarc)
dist2emb <- st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm)
dist2emb <- set_units(dist2emb, km)
# check output
length(dist2emb)
nrow(SFhomes15_utm)
head(dist2emb, 10)
nrow(SFhomes15_utm)
head(dist2emb, 10)
# check output
length(dist2emb)
bart_stations_in_sf <-st_within(bart_utm, SFboundary_utm)
head(bart_stations_in_sf)
bart_stations_in_sf <-st_within(bart_utm, SFboundary_utm, sparse=F)
head(bart_stations_in_sf)
bart_stations_in_sf <-st_within(bart_utm, SFboundary_utm, sparse=F)
head(bart_stations_in_sf)
dim(bart_stations_in_sf)
dim(bart_utm)
T %in% bart_stations_in_sf
length(T)>4 %in% bart_stations_in_sf
length(T)>5 %in% bart_stations_in_sf
length(T)>10 %in% bart_stations_in_sf
length(T)>20 %in% bart_stations_in_sf
length(T)>100 %in% bart_stations_in_sf
bart_utm[bart_stations_in_sf, ]$STATION
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
sfbart_utm
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
sfbart_utm
tmap_mode("view")
tm_shape(SFboundary_utm) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfbart_utm) +
tm_dots(col="red")
tmap_mode("view")
tm_shape(SFboundary_utm) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfbart_utm) +
tm_dots(col="red")
tmap_mode("plot")
#read in tracts
sftracts <- st_read("./data", "sftracts_wpop")
#plot
plot(sftracts['pop14'])
sftracts <- st_read("./data", "sftracts_wpop")
plot(sftracts['pop14'])
plot(sftracts['pop14'])
sftracts <- st_read("./data", "sftracts_wpop")
plot(sftracts['pop14'])
homes_with_tracts <- st_within(SFhomes15_utm, sftracts)
# What is the CRS of the property data?
st_crs(SFhomes15_utm)
# What is the CRS of the census tracts?
st_crs(sftracts)
#transform to UTM
sftracts_utm = st_transform(sftracts, st_crs(SFhomes15_utm))
# make sure the CRSs are the same
st_crs(sftracts_utm) == st_crs(SFhomes15_utm)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts_utm)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts_utm)
class(homes_with_tracts)
length(homes_with_tracts)
nrow(sftracts_utm)
nrow(SFhomes15_utm)
head(homes_with_tracts)
homes_with_tracts1 <- unlist(homes_with_tracts)
sftracts_utm1 <- sftracts_utm[homes_with_tracts1,]
SFhomes15_utm$home_geoid <- sftracts_utm1$GEOID
med_hh_inc <- read.csv("data/sf_med_hh_income2015.csv", stringsAsFactors = F,
colClasses = c("character","numeric"))
head(med_hh_inc)
#make sure we're using `base` `merge` (because multiple other packages
#that you might have read in also have a `merge` function)
SFhomes15_utm <- base::merge(SFhomes15_utm,
med_hh_inc, by.x="home_geoid", by.y="GEOID")
head(SFhomes15_utm, 2) # Look for the col medhhinc
tmap_mode("view")
tm_shape(SFhomes15_utm) + tm_dots(col="medhhinc")
tracts_with_mean_val <- aggregate(x = SFhomes15_utm["totvalue"],
by = sftracts_utm,
FUN = mean)
class(tracts_with_mean_val)
head(tracts_with_mean_val, 2)
nrow(tracts_with_mean_val) == nrow(sftracts_utm)
sftracts_utm$mean_totvalue <- tracts_with_mean_val$totvalue
head(sftracts_utm, 2) # check it
choropleth =
tm_shape(sftracts_utm) +
tm_polygons(col="mean_totvalue", border.col=NA)
choropleth
choropleth + tm_shape(SFhomes15_utm) + tm_dots(size = 0.01)
choropleth
choropleth + tm_shape(SFhomes15_utm) + tm_dots(size = 0.01)
#remember: our units are meters!
bart_1km_buffer <- st_buffer(sfbart_utm, dist=1000)
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
SFhomes_near_bart <-st_intersection(SFhomes15_utm, bart_1km_buffer)
# Take a look
head(SFhomes_near_bart)
tmap_mode('view')
tm_shape(bart_1km_buffer) + tm_borders(col="red") +
tm_shape(sfbart_utm) + tm_dots() +
tm_shape(SFhomes_near_bart) +
tm_dots(col = 'green', size = 0.03)
